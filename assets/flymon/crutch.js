// Generated by CoffeeScript 1.9.1
(function() {
  var debug,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.log = function() {
    try {
      return console.log.apply(console, arguments);
    } catch (_error) {}
  };

  debug = function() {
    if (window.console) {
      return console.debug.apply(arguments);
    }
  };

  this.Chart = (function() {
    function Chart(data1, done) {
      this.data = data1;
      this.done = done;
      this.show = bind(this.show, this);
      this.loadData = bind(this.loadData, this);
      this.query = bind(this.query, this);
      this.macCondition = bind(this.macCondition, this);
      this.fieldNames = bind(this.fieldNames, this);
      this.queryFields = bind(this.queryFields, this);
      this.series = [];
      this.parseArgs(window.location.search.substring(1));
      this.loadData((function(_this) {
        return function() {
          _this.show();
          if (_this.done) {
            return _this.done();
          }
        };
      })(this));
    }

    Chart.prototype.parseArgs = function(qstr) {
      var a, b, i;
      this.argv = {};
      a = qstr.split('&');
      for (i in a) {
        b = a[i].split('=');
        this.argv[decodeURIComponent(b[0])] = decodeURIComponent(b[1]);
      }
      return this.argv;
    };

    Chart.prototype.queryFields = function() {
      var fields, ref;
      fields = (ref = this.data.select) != null ? ref.fields : void 0;
      if ((fields != null ? fields.join : void 0) != null) {
        return fields;
      } else if (typeof fields === 'object') {
        return _.map(fields, function(k, v) {
          return k + " AS " + v;
        });
      } else {
        return [this.data.select.fields];
      }
    };

    Chart.prototype.fieldNames = function() {
      var fields, ref;
      fields = (ref = this.data.select) != null ? ref.fields : void 0;
      if ((fields != null ? fields.join : void 0) != null) {
        return fields;
      } else if (typeof fields === 'object') {
        return _.map(fields, function(k, v) {
          return v;
        });
      } else {
        return [this.data.select.fields];
      }
    };

    Chart.prototype.macCondition = function() {
      var macs;
      macs = function(str) {
        macs = str.split(",").map(function(s) {
          return "mac = '" + s + "'";
        });
        return "( " + (macs.join(" OR ")) + " )";
      };
      if (this.argv.macs) {
        return macs(this.argv.macs);
      } else if (this.data.select.macs != null) {
        return macs(this.data.select.macs);
      } else if (this.data.select.mac != null) {
        return "mac = '" + this.data.select.mac + "'";
      } else {
        return "mac =~ /^18FE.*/";
      }
    };

    Chart.prototype.period = function() {
      if (this.argv.period) {
        return this.argv.period;
      } else {
        return "12h";
      }
    };

    Chart.prototype.query = function() {
      var fields;
      fields = this.queryFields().join(', ');
      return "SELECT host, " + fields + " FROM srach GROUP BY host, time(10m) fill(0) WHERE " + (this.macCondition()) + " AND time > NOW() - " + (this.period()) + ";";
    };

    Chart.prototype.loadData = function(cb) {
      log("query: ", this.query());
      return influxdb.query(this.query(), (function(_this) {
        return function(points) {
          var name, nodes, serie, series;
          log("points:", points);
          nodes = _.groupBy(points, function(point) {
            return point.host;
          });
          series = {};
          log("nodes:", nodes);
          nodes = _.groupBy(points, function(point) {
            return point.host;
          });
          _.each(nodes, function(points, host) {
            return _.each(_this.fieldNames(), function(field) {
              var name;
              name = host + " - " + field;
              return series[name] || (series[name] = {
                name: name,
                data: []
              });
            });
          });
          _.each(nodes, function(points, host) {
            var data;
            return data = _.each(points, function(point) {
              return _.each(_this.fieldNames(), function(field) {
                var name;
                name = point.host + " - " + field;
                return series[name].data.push([point.time.getTime(), point[field]]);
              });
            });
          });
          for (name in series) {
            serie = series[name];
            if (_.find(serie.data, function(item) {
              return !!item[1];
            })) {
              serie.data = serie.data.reverse();
              _this.series.push(serie);
            }
          }
          if (cb != null) {
            return cb();
          }
        };
      })(this));
    };

    Chart.prototype.show = function() {
      var div, params;
      div = $('<div>').addClass("chart");
      $("#content").append(div);
      params = _.clone(this.data.chart);
      _.merge(params, {
        chart: {
          renderTo: div[0],
          height: 300,
        },
        title: {
          text: this.data.chart.title
        },
        xAxis: {
          type: 'datetime'
        },
        legend: {
          layout: 'horizontal',
          align: 'center',
          verticalAlign: 'bottom',
          borderWidth: 1
        },
        series: this.series
      });
      if (params.series.length > 0) {
        return this.chart = new Highcharts.Chart(params);
      }
    };

    return Chart;

  })();

  $(document).ready(function() {
    if (window.location.search.length !== 0) {
      $('#no-data').hide();
      window.charts = [];
      window.influxdb = new InfluxDB({
        host: 'essence.flymon.net',
        port: 8086,
        username: 'webface',
        password: 'webface2015',
        database: 'esp8266'
      });
      Highcharts.setOptions({
        global: {
          useUTC: false
        }
      });
      return async.eachSeries(graphs, function(graph_data, cb) {
        var chart, data;
        data = _.cloneDeep(defaults);
        _.merge(data, graph_data);
        chart = new Chart(data, cb);
        return window.charts.push(chart);
      });
    }
  });

}).call(this);
